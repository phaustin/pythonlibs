"""
   reads sqllite databases created by readlist.py and writes out
    file information

   example:  python retrieve.py filelist_save.db dulist_save.db phil
"""

from sqlalchemy import and_
from sqlalchemy.orm import sessionmaker
import dataset
from pandas import DataFrame, Series
import argparse, textwrap
import sys

def get_frame_from_query(the_query):
    """make a dataframe from an sqlalchemy query"""
    colnames=[col['name'] for col in the_query.column_descriptions]
    df=DataFrame.from_records(list(the_query),columns=colnames)
    return df

linebreaks=argparse.RawTextHelpFormatter
descrip=textwrap.dedent(globals()['__doc__'])
parser = argparse.ArgumentParser(formatter_class=linebreaks,description=descrip)
parser.add_argument('filelist', nargs=1, type=str,help='filelist generated by ls')
parser.add_argument('direclist', nargs=1, type=str,help='directory list generated by du')
parser.add_argument('owner', nargs=1, type=str,help='file owner')
parser.add_argument('--size',nargs='?',default=1.e6, type=float,help='float smallest size in bytes (default 1.e6)')
parser.add_argument('--level',nargs='?',default=3, type=int,help='int directory level (default 3)')
args=parser.parse_args()

file_db=args.filelist[0]
direc_db=args.direclist[0]
owner=args.owner[0]
size=int(args.size)
level=int(args.level)
#print args.size,args.level

#sys.exit(0)

dbstring='sqlite:///{:s}'.format(file_db)
db = dataset.connect(dbstring)
session=sessionmaker(bind=db.engine)
thesession=session()
file_table=db.metadata.tables['files']

bigfile=int(1.e7)
large_query=thesession.query(file_table).filter(and_(file_table.c.size > bigfile,file_table.c.owner==owner))

df_files=get_frame_from_query(large_query)

## dbname='dulist_save.db'
dbstring='sqlite:///{:s}'.format(direc_db)
db = dataset.connect(dbstring)
session=sessionmaker(bind=db.engine)
thesession=session()
direc_table=db.metadata.tables['direcs']
#large_query=thesession.query(direc_table).filter(and_(direc_table.c.level==2))
large_query=thesession.query(direc_table).filter(and_(direc_table.c.level==level,direc_table.c.size> size))
df_direcs=get_frame_from_query(large_query)
df_direcs['size']=df_direcs['size']*1000*1.e-6  #du -k gives file size in kbytes



