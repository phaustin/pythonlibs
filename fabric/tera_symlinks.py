"""
  parse ls -R -l -Q --time-style=full-iso --time=status /users/jdawe > ~/jdawe.txt
"""
from parse_ls import read_ls
import os, site
import dataset
from write_filelist import write_database
from compare_files import get_df_from_table
from collections import defaultdict
import argparse, textwrap
import pickle

home_dir=os.getenv('HOME')
site.addsitedir('%s/repos' % home_dir)
from pythonlibs.pyutils.silent_remove import silent_remove
from pythonlibs.pyutils.md5sum import md5sum

linebreaks=argparse.RawTextHelpFormatter
descrip=textwrap.dedent(globals()['__doc__'])
parser = argparse.ArgumentParser(formatter_class=linebreaks,description=descrip)
parser.add_argument('--listname', nargs="?", type=str,help='filelist generated by ls')
args=parser.parse_args()

roc_db='tera_jordan.db'
if args.listname:
    with open(args.listname,'rb') as infile:
        df=read_ls(infile)
    db=write_database(roc_db,df)
else:
    dbstring='sqlite:///{:s}'.format(roc_db)
    db=dataset.connect(dbstring)
    df=get_df_from_table(db,'files')


out=df['name'].str.contains('.py')
test=df[out]

read_dups=True
if read_dups:    
    with open('users_jdawe_md5ict.pkl','r') as f:
        dup_dict=pickle.load(f)

name_dict=defaultdict(int)
dup_dict=defaultdict(list)
for id,item in test.iterrows():
    item=dict(item)
    orig_name=item['name']
    if orig_name.find('.pyc') > 0:
        continue
    fullname="{directory:s}/{name:s}".format(**item)
    try:
        md5=md5sum(fullname)
    except:
        print "md5 can't read %s" % fullname
        continue
    dup_dict[md5].append(fullname)
    if len(dup_dict[md5]) > 1:
        continue
    new_name=orig_name
    name_dict[orig_name]+=1
    if name_dict[orig_name] > 1:
        new_name="%s_%d" % (orig_name,name_dict[orig_name])
        print "name_clash: ",new_name
    os.symlink(fullname,'tera_files/%s' % new_name)

    
write_dups=True
if write_dups:    
    with open('tera_jdawe_md5ict.pkl','w') as f:
        pickle.dump(dup_dict,f)
